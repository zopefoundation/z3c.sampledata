================================
Principal Sample Data Generation
================================

This gerator creates principals from a data source.

  >>> from z3c.sampledata.generator.principals import SamplePrincipals
  >>> generator = SamplePrincipals()

Before we can use the generator we need to setup principal authentication.

  >>> import zope.event
  >>> from zope.lifecycleevent import ObjectCreatedEvent
  >>> from zope.app.authentication.interfaces import IAuthenticatorPlugin
  >>> from zope.app.security.interfaces import IAuthentication
  >>> from zope.app.authentication.authentication import PluggableAuthentication
  >>> from zope.app.authentication.principalfolder import PrincipalFolder

  >>> sm = root.getSiteManager()
  >>> default = sm['default']
  >>> pau = PluggableAuthentication()
  >>> zope.event.notify(ObjectCreatedEvent(pau))
  >>> default['pau'] = pau
  >>> sm.registerUtility(pau, IAuthentication)
  >>> # we can do this always
  >>> pau.credentialsPlugins = ('Session Credentials', )
  >>> pfNames = (u'members',)
  >>> pau.authenticatorPlugins = pfNames
  >>> for name in pfNames:
  ...     if name in pau:
  ...         continue
  ...     pf = PrincipalFolder(name +'.')
  ...     default['pau'][name] = pf
  ...     sm.registerUtility(pf, IAuthenticatorPlugin, name)

  >>> principalDataSource = [['batlogg','Jodok Batlogg','bJB'],
  ...                        ['jukart','Juergen Kartnaller','jJK'],
  ...                        ['dobee','Bernd Dorn','dBD'],
  ...                        ['srichter','Stephan Richter','sSR'],
  ...                        ['byzo','Michael Breidenbruecker','bMB'],
  ...                        ['oli','Oliver Ruhm','oOR']]

Now that everything is set up we can generate the principals for the root
object.

We can define a maximum number of users.

  >>> p = generator.generate(root,
  ...                    param={'minPrincipals':-1,
  ...                           'maxPrincipals': 2,
  ...                           'pauLocation':'default/pau',
  ...                           'passwordManager':'SHA1'},
  ...                    dataSource=principalDataSource
  ...                   )
  >>> p == pau
  True
  >>> len(pau['members'])
  2

With both parameter set to -1 all members from the datasource are generated.

  >>> p = generator.generate(root,
  ...                    param={'minPrincipals':-1,
  ...                           'maxPrincipals':-1,
  ...                           'pauLocation':'default/pau',
  ...                           'passwordManager':'SHA1'},
  ...                    dataSource=principalDataSource
  ...                   )
  >>> p == pau
  True
  >>> principal = pau['members']['batlogg']
  >>> principal.title
  u'Jodok Batlogg'

We can define a minimum number of users.

  >>> numMembers = len(pau['members'])
  >>> p = generator.generate(root,
  ...                    param={'minPrincipals': 10,
  ...                           'maxPrincipals':-1,
  ...                           'pauLocation':'default/pau',
  ...                           'passwordManager':'SHA1'},
  ...                   )
  >>> p == pau
  True
  >>> len(pau['members']) == numMembers+10
  True

